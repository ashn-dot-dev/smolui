import "c";
import "std";

import "raylib";

import "microui.sunder";
import "smolui.sunder";

func main() void {
    InitWindow(800, 600, startof("demo"));
    defer CloseWindow();
    SetTargetFPS(60);

    var ui = smolui::context::init(std::ptr[[Font]]::NULL);

    var textbuf_a = std::string::init_from_str("textbox a");
    var textbuf_b = std::string::init_from_str("textbox b");
    defer textbuf_a.fini();
    defer textbuf_b.fini();
    var checked: bool = false;
    var slider: float = 0.0;
    var number: float = 0.0;

    for not WindowShouldClose() {
        BeginDrawing();
        ClearBackground(BLACK);

        ui.handle_input();

        ui.begin();
        if ui.begin_window_ex("window", (:smolui::rect){.x = 20, .y = 20, .w = 800 - 2 * 20, .h = 600 - 2 * 20}, smolui::OPT_NOCLOSE) {
            ui.text("some text");
            ui.label("label");
            if ui.button("button"){
                std::print_line(std::out(), "button pressed");
            }
            if ui.button_ex("button ex", smolui::ICON_MAX, smolui::OPT_ALIGNCENTER){
                std::print_line(std::out(), "button (ex) pressed");
            }
            if ui.checkbox("checkbox", &checked) {
                std::print_line(std::out(), "checkbox interaction");
            }
            if ui.textbox(&textbuf_a) {
                std::print_line(std::out(), "textbox interaction");
            }
            var textbox_ex_res = ui.textbox_ex(&textbuf_b, smolui::OPT_ALIGNCENTER);
            if textbox_ex_res != 0 {
                std::print_line(std::out(), "textbox (ex) interaction");
                if (textbox_ex_res & smolui::RES_SUBMIT) != 0 {
                    std::print_line(std::out(), "\ttextbox submit");
                }
                if (textbox_ex_res & smolui::RES_CHANGE) != 0 {
                    std::print_line(std::out(), "\ttextbox change");
                }
            }
            if ui.slider(&slider, 0.0, 100.0) {
                std::print_line(std::out(), "slider interaction");
            }
            if ui.number(&number, 5.0) {
                std::print_line(std::out(), "number interaction");
            }
            if ui.header("header") {
                ui.text("text under header");
            }
            if ui.header_ex("header ex", smolui::OPT_EXPANDED) {
                ui.text("text under header (ex)");
            }
            if ui.begin_treenode("treenode") {
                ui.text("text under treenode");
                ui.end_treenode();
            }
            if ui.begin_treenode_ex("treenode ex", smolui::OPT_EXPANDED) {
                ui.text("text under treenode (ex)");
                ui.end_treenode();
            }
            if ui.button("open popup") {
                ui.open_popup("popup");
            }
            if ui.begin_popup("popup") {
                ui.text("text inside popup");
                ui.end_popup();
            }
            ui.begin_panel("panel");
            ui.text("text inside panel");
            ui.end_panel();

            ui.end_window();
        }
        ui.end();

        ui.render();
        EndDrawing();
    }
}
